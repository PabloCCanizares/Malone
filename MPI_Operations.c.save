
#include <stdio.h>
#include <stdlib.h>
# include "mpi.h"
#include "Options.h"

#define NUMBER_OF_TESTS 10
#define ROWS  10
#define COLS  10

#define DEBUG_MPI_OPS 0

void init_Datatype_deploy()
{
    int exeParams[NUM_DEPLOY_PARAMS];    

    //Commit the struct
    MPI_Type_contiguous(NUM_DEPLOY_PARAMS, MPI_INT, &m_DeployType);
    MPI_Type_commit(&m_DeployType);
}
void init_Datatype_test()
{
  //Lets initialize all the datatypes neccesary to perform the MALONE process
    
    int base, i;
    int blocklen[5] = {MAX_RESULT_SIZE, 1, 1, 1, 1}; 
     
    MPI_Datatype type[5] = {MPI_CHAR, MPI_DOUBLE, MPI_INT, MPI_INT, MPI_INT};     
    MPI_Aint     disp[5];     
    MPI_Status status;
        
    MPI_Address( &m_oTest, disp); 
    MPI_Address( &m_oTest[0].dTime, disp+1); 
    MPI_Address( &m_oTest[0].nKill, disp+2); 
    MPI_Address( &m_oTest[0].nTest, disp+3);
     MPI_Address( &m_oTest[0].nMutant, disp+4);
     
    base = disp[0];
    for (i = 0; i < 5; i++) 
        disp[i] -= base;
       
    MPI_Type_struct( 5, blocklen, disp, type, &m_TestType);    
    MPI_Type_commit(&m_TestType); 
}
void init_Datatype_mutant()
{
    int base, i;
    int blocklen[7] = {1, 1, 1, 1, MAX_TESTS, MAX_TESTS, MAX_TESTS}; 
    
    MPI_Datatype type[7] = {MPI_INT, MPI_INT, MPI_INT, MPI_INT, MPI_DOUBLE, MPI_INT, MPI_INT};     
    MPI_Aint     disp[7];     
    MPI_Status status;
        
    MPI_Address( m_oMutant, disp);    
    MPI_Address( &m_oMutant[0].nState, disp+1);
    MPI_Address( &m_oMutant[0].nTestKiller, disp+2);
    MPI_Address( &m_oMutant[0].nTests, disp+3);
    MPI_Address( &m_oMutant[0].oTime, disp+4);
    MPI_Address( &m_oMutant[0].oKill, disp+5);
    MPI_Address( &m_oMutant[0].oTest, disp+6);
      
    base = disp[0];
    for (i = 0; i < 7; i++) 
        disp[i] -= base;
       
    MPI_Type_struct( 7, blocklen, disp, type, &m_MutantType);    
    MPI_Type_commit(&m_MutantType);    
    
}
void initializeMPI_Datatype()
{  
    init_Datatype_deploy();
    init_Datatype_test();
    init_Datatype_mutant();
    printf("initializeMPI_Datatype - Initialized\n");
}

void sendDeployMode(T_stExecutionStructure* exeMode, int nDest)
{
    int i;
    int exeParams[NUM_DEPLOY_PARAMS];

    if(DEBUG_MPI_OPS) printf("sendDeployMode - Init!\n");

    if(DEBUG_MPI_OPS) printf("sendDeployMode - Initialiting values!\n");
    
    //Copy the values from the struct
    exeParams[0] = exeMode->nExecutionMode;
    exeParams[1] = exeMode->nMutantInit;
    exeParams[2] = exeMode->nMutantEnd;
    exeParams[3] = exeMode->nTestInit;
    exeParams[4] = exeMode->nTestEnd;        
    
    printDeployStruct(exeMode);
    
    if(DEBUG_MPI_OPS) printf("sendDeployMode - Sending data to %d!\n", nDest);
    
    MPI_Send(&exeParams, 1, m_DeployType, nDest, 0, MPI_COMM_WORLD);

    if(DEBUG_MPI_OPS) printf("sendDeployMode - Done!\n");
}
T_stExecutionStructure* receiveDeployMode()
{
    int i;
    MPI_Status status;   
    T_stExecutionStructure* exeMode;
    int exeParams[NUM_DEPLOY_PARAMS];
    
    if(DEBUG_MPI_OPS) printf("<%d> receiveDeployMode - Receiving\n", m_nRank);

    MPI_Recv(&exeParams, 1, m_DeployType, 0, 0, MPI_COMM_WORLD,&status);
        
    //Copy parameters    
    exeMode = malloc(sizeof(T_stExecutionStructure));
    exeMode->nExecutionMode = exeParams[0];
    exeMode->nMutantInit = exeParams[1];
    exeMode->nMutantEnd = exeParams[2];
    exeMode->nTestInit = exeParams[3];
    exeMode->nTestEnd = exeParams[4];    
    
    if(DEBUG_MPI_OPS) printf("<%d> receiveDeployMode - End\n", m_nRank);
    return exeMode;
}
void sendTest(T_stTestInfo* pTest, int nDest)
{    
    if(pTest != NULL)
    {
        printTest(pTest);
        test2redTest(pTest, &m_oTest[0]);
        MPI_Send(&m_oTest, 1, m_TestType, nDest, 0, MPI_COMM_WORLD);
    }
    else
        printf("WARNING!! The test is empty\n");
    
    if(DEBUG_MPI_OPS) printf("sendTest - <%d> Test sent!\n", m_nRank);
}

void sendTests(T_stExecutionStructure* pExeRetMode, int nDest)
{    
    T_stTestInfo* pTest;
    T_stMutant* pMutant;
    if(pExeRetMode)
    {
        pMutant = m_oMutantList.array[pExeRetMode->nMutantInit];
        if(pMutant)
        {
            pTest = pMutant->oTestList.tests[pExeRetMode->nTestInit];                
                
            if(pTest)
            {
                test2redTest(pTest, &m_oTest);
                MPI_Send(&m_oTest, 1, m_TestType, nDest, 0, MPI_COMM_WORLD);
            }               
        }        
    }
    
    if(DEBUG_MPI_OPS) printf("<%d> End!\n", m_nRank);
}

T_stTestInfo* receiveTest(int nSource)
{
    T_stTestInfo* pTest;
    MPI_Status status;    
      
    MPI_Recv(&m_oTest, 1, m_TestType, nSource, 0, MPI_COMM_WORLD,&status);                  
    if(m_nRank != MALONE_MASTER)
    {
        if(DEBUG_MPI_OPS) printf("Received Test: [%d] %s %lf %d\n", 0,m_oTest[0].res, m_oTest[0].dTime,m_oTest[0].nKill);
        //copy the values!!
        pTest = malloc(sizeof(T_stTestInfo));        
        strcpy(pTest->res, m_oTest[0].res);
        pTest->dTime = m_oTest[0].dTime;
        pTest->nKill = m_oTest[0].nKill;
        pTest->nTest = m_oTest[0].nTest;
    }    
  
    if(DEBUG_MPI_OPS) printf("<%d> End!\n", m_nRank);
    
   return pTest;
}
T_stTestInfo* receiveTestList(int nSource, int nTests)
{
    T_stTestInfo* pTest;
    MPI_Status status;    
      
    MPI_Recv(&m_oTest, nTests, m_TestType, nSource, 0, MPI_COMM_WORLD,&status);                  
    
    
    if(DEBUG_MPI_OPS) printf("Received Test: [%d] %s %lf %d\n", 0,m_oTest[0].res, m_oTest[0].dTime,m_oTest[0].nKill);
    //copy the values!!
    pTest = malloc(sizeof(T_stTestInfo));        
    strcpy(pTest->res, m_oTest[0].res);
    pTest->dTime = m_oTest[0].dTime;
    pTest->nKill = m_oTest[0].nKill;
    pTest->nTest = m_oTest[0].nTest;    
  
    if(DEBUG_MPI_OPS) printf("<%d> End!\n", m_nRank);
    
   return pTest;
}
void sendMutant(T_stMutant* pMutant, int nDest)
{
    int i;
    MPI_Status status;   
    
    if(pMutant && nDest >= 0)
    {
        m_oMutant[0].nNumber = pMutant->nNumber;
        m_oMutant[0].nState = pMutant->nState;
        m_oMutant[0].nTestKiller = pMutant->nTestKiller;            
        m_oMutant[0].nTests = pMutant->oTestList.nElems;

        for(i = 0;i<pMutant->oTestList.nElems;i++)
        {
            m_oMutant[0].oKill[i] = pMutant->oTestList.tests[i]->nKill;
            m_oMutant[0].oTest[i] = pMutant->oTestList.tests[i]->nTest;
            m_oMutant[0].oTime[i] = pMutant->oTestList.tests[i]->dTime;
        }            
        
        MPI_Send(&m_oMutant, 1, m_MutantType, nDest, 0, MPI_COMM_WORLD);
    }
    else
    {
        if(!pMutant)
            printf("sendMutant - WARNING!! Null mutant.\n");
        if(nDest<0)
            printf("sendMutant - WARNING!! Negative destination.\n");
    }
}
void sendMutants(T_stExecutionStructure* pExeMode, int nDest)
{
    int i, j, nTotalMutants, nMutantInit, nMutantEnd, nTests;
    MPI_Status status;   
    
    if(DEBUG_MPI_OPS) printf("sendMutants - Init\n");
    if(pExeMode && nDest >= 0)
    {
        nMutantInit = pExeMode->nMutantInit;
        nMutantEnd = pExeMode->nMutantEnd;
        nTotalMutants = (nMutantEnd - nMutantInit)+1;
        
        if(DEBUG_MPI_OPS) printf("sendMutants - Sending %d mutants - [%d - %d]\n", nTotalMutants, nMutantInit, nMutantEnd);
        if(nTotalMutants >0)
        {                        
            for(i=nMutantInit; i<=nMutantEnd; i++)
            {
                T_stMutant* pMutant = m_oMutantList.array[i];
                T_stTestInfo* pTest;                
                if(pMutant)
                {
                    if(DEBUG_MPI_OPS) printf("[Mutant - %d] Inserting Tests: %d \n",i,pMutant->oTestList.nElems);
                    printMutant(pMutant);                    
                    m_oMutant[i].nNumber = pMutant->nNumber;
                    m_oMutant[i].nState = pMutant->nState;
                    m_oMutant[i].nTestKiller = pMutant->nTestKiller;            
                    m_oMutant[i].nTests = pMutant->oTestList.nElems;  
                    
                    
                    for(j = 0;j<pMutant->oTestList.nElems;j++)
                    {                        
                        pTest = pMutant->oTestList.tests[j];                     
                        if(pTest)
                        {
                            m_oMutant[i].oKill[j] =  pTest->nKill;
                            m_oMutant[i].oTest[j] =  pTest->nTest;
                            m_oMutant[i].oTime[j] = pTest->dTime;
                            m_oMutant[i].nTests++;
                        }                        
                        // pMutant->oTestList.tests[j]->nKill;
                        // pMutant->oTestList.tests[j]->nTest;
                        //m_oMutant[i].oTime[j] = pMutant->oTestList.tests[j]->dTime;
                    }                    
                }
                else
                    printf("sendMutants - WARNING! empty mutant\n");
                
            }
            if(DEBUG_MPI_OPS) printf("sendMutants - Informing the master with the number of mutants to send: %d\n", nTotalMutants);        
            //Informs the master with the number of mutants to send        
            MPI_Send(&nTotalMutants, 1, MPI_INT, nDest, 0, MPI_COMM_WORLD);

            if(DEBUG_MPI_OPS) printf("sendMutants - Sending mutants!\n");
            //Then, send the mutants!
            MPI_Send(&m_oMutant[nMutantInit], nTotalMutants, m_MutantType, nDest, 0, MPI_COMM_WORLD);
        }
        else
        {
            printf("sendMutants - WARNING!! Negative number of mutants to send!!\n");
        }
    }
    else
    {
        if(!pExeMode)
            printf("sendMutants - WARNING!! Null mutant.\n");
        if(nDest<0)
            printf("sendMutants - WARNING!! Negative destination.\n");
    }  
    
    if(DEBUG_MPI_OPS) printf("sendMutants - End\n");
}

int receiveSingleTestAndCheck(T_stExecutionStructure pExeMode[MAX_WORKERS], int *pnWorkerSource)
{
    int nRet, nTests, nWorkerSource, nMutantInit, nTestInit, nRecvCode;
    MPI_Status* status;  
    T_stTestInfo* pTest;    
    
    status = malloc(sizeof(MPI_Status));
    if(DEBUG_MPI_OPS) printf("receiveSingleTestAndCheck - Init\n");

    nRet = nTests = nWorkerSource = nMutantInit = nTestInit = 0;
    nTests = 1;
    
    nRecvCode = MPI_Recv(&m_oTest, 1, m_TestType, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD,status); 
    
    if(DEBUG_MPI_OPS) printf("<%d>receiveSingleTestAndCheck - Receiving %d test from %d | code: %d\n", m_nRank, nTests, status->MPI_SOURCE, nRecvCode);
    nWorkerSource = status->MPI_SOURCE;
    printf("receiveSingleTestAndCheck - WARNING! Invalid worker source (%d) - Error: %d\n", nWorkerSource, status->MPI_ERROR);
    MPI_SUCCESS;
    if(nWorkerSource != -1 && nWorkerSource < m_nSize)
    {
        nMutantInit = pExeMode[nWorkerSource].nMutantInit;
        nTestInit = pExeMode[nWorkerSource].nTestInit;
        
        if(DEBUG_MPI_OPS) printf("receiveSingleTestAndCheck- Received Test: [%d] %s %lf %d\n", nMutantInit,m_oTest[0].res, m_oTest[0].dTime,m_oTest[0].nKill);
        
        //copy the values!!
        pTest = malloc(sizeof(T_stTestInfo));        
        strcpy(pTest->res, m_oTest[0].res);
        pTest->dTime = m_oTest[0].dTime;
        pTest->nKill = m_oTest[0].nKill;
        pTest->nTest = m_oTest[0].nTest;
        
        if(!checkTestResult(pTest))
        {
            pTest->nKill = 1; 
            if(DEBUG_MPI_OPS) printf("receiveSingleTestAndCheck- Test %d of Mutant %d Killed!!\n",pTest->nTest, m_oTest[0].nMutant);
        }
        else
            nRet = 1;
        
        allocMutant(nMutantInit);
        insertTestResult(nMutantInit, nTestInit, pTest);
    }       else
    {
        printf("receiveSingleTestAndCheck - WARNING! Invalid worker source (%d) - Error: %d\n", nWorkerSource, status->MPI_ERROR);
        nRet = 0;
char error_string[BUFSIZ];
int length_of_error_string;

MPI_Error_class(error_code, &status->MPI_ERROR);
MPI_Error_string(&status->MPI_ERROR, error_string, &length_of_error_string);
fprintf(stderr, "%3d: %s\n", my_rank, error_string);
MPI_Error_string(error_code, error_string, &length_of_error_string);
fprintf(stderr, "%3d: %s\n", my_rank, error_string);

    }
   
    //Copy the worker source
    *pnWorkerSource = nWorkerSource;
    
    if(DEBUG_MPI_OPS) printf("receiveSingleTestAndCheck - End\n");
    return nRet;
}

int receiveMutants(T_stExecutionStructure pExeMode[MAX_WORKERS])
{
    int i, nTotalMutants, nMutantInit, nMutantEnd, nMutants, nWorkerSource;
    MPI_Status status;   
    T_stMutant* pMutant;
    
    if(DEBUG_MPI_OPS) printf("receiveMutants - Init\n");

    if(pExeMode)
    {
        if(DEBUG_MPI_OPS) printf("receiveMutants - Waiting for the number of mutants to receive\n");        
        MPI_Recv(&nMutants, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD,&status);   
        
        if(DEBUG_MPI_OPS) printf("receiveMutants - Receiving %d mutants from %d\n", nMutants, status.MPI_SOURCE);
        nWorkerSource = status.MPI_SOURCE;
        if( nWorkerSource != -1)
        {
            nMutantInit = pExeMode[nWorkerSource].nMutantInit;
            nMutantEnd = pExeMode[nWorkerSource].nMutantEnd;
            nTotalMutants = nMutantEnd - nMutantInit;
            
            if(nMutantInit>0)
            {
                MPI_Recv(&m_oMutant[nMutantInit], nMutants, m_MutantType, nWorkerSource, 0, MPI_COMM_WORLD,&status);   

                if(DEBUG_MPI_OPS) printf("receiveMutants - Received mutants!!\n");

                //Transform
                for(i=nMutantInit;i<=nMutantEnd;i++)
                {
                    pMutant = redMut2Mut((T_stM*)&m_oMutant[i]);     
                    insertMutant(pMutant, i);                    
                }                    
            }
            else
            {
               printf("receiveMutants - WARNING!! Invalid mutant index!\n"); 
            }          
        }
        else
        {
            printf("receiveMutants - WARNING!! Invalid source!\n");
        }
    }
    else
    {
        printf("receiveMutants - WARNING!! Execution structure is empty!\n");
    }
        
    if(DEBUG_MPI_OPS) printf("receiveMutants - End\n");
    
    return nWorkerSource;
}
T_stMutant* receiveMutant(int nSource)
{
    int i, nMutants;
    MPI_Status status;   
    T_stMutant* pMutant;
    
    if(nSource>=0)
    {
        MPI_Recv(&m_oMutant, 1, m_MutantType, nSource, 0, MPI_COMM_WORLD,&status);
        
        pMutant = redMut2Mut((T_stM*)&m_oMutant[0]);        
    }
    else
        printf("receiveMutant - WARNING!! Negative source.\n");
    
    return pMutant;
}
int sendOriginalTestResults(T_stTestList* pTestList)
{
    int nRet, i, nTestItems;
    
    if(DEBUG_MPI_OPS) printf("sendOriginalTestResults - Init\n");
    
    if(pTestList)
    {
        nTestItems = pTestList->nElems;
        
        //transform the test list to a compatible structure
        testList2redTestList(&m_oTest, pTestList);
        
        if(DEBUG_MPI_OPS) printf("Sending the size of the test suite: %d tests\n", nTestItems);
        //Send to workers the number of tests to process
        MPI_Bcast(&nTestItems, 1, MPI_INT, 0, MPI_COMM_WORLD);
        
        if(DEBUG_MPI_OPS) printf("Sending the test suite\n");
        //Send the specific tests
        MPI_Bcast(m_oTest, nTestItems, m_TestType, 0, MPI_COMM_WORLD);
    }
    else
        printf("sendOriginalTestResults - WARNING! The test suite is empty!!!!\n");
    
    if(DEBUG_MPI_OPS) printf("sendOriginalTestResults - End\n");
    
    return nRet;
}
void receiveOriginalTestResults(T_stTestList* pResList)
{
    int nTestItems;
    
    if(DEBUG_MPI_OPS) printf("receiveOriginalTestResults - Init\n");
    
    if(pResList)
    {
        //Receive from master the number of tests to process
       if(DEBUG_MPI_OPS) printf("Receiving the size of the test suite\n");
       MPI_Bcast(&nTestItems, 1, MPI_INT, 0, MPI_COMM_WORLD);
       
       if(DEBUG_MPI_OPS) printf("receiveOriginalTestResults - Receiving the size of the test suite: %d\n", nTestItems);
       
       if(nTestItems>0)
       {
           pResList->nElems = nTestItems;
           
           //Send the specific tests
           MPI_Bcast(&m_oTest, nTestItems, m_TestType, 0, MPI_COMM_WORLD);

           //transform the test list to a compatible structure
           redtestList2TestList((T_stTI*)&m_oTest, pResList, nTestItems);
       }       
       else
       {
           printf("None elements received!!\n");
       }
    }
    if(DEBUG_MPI_OPS) printf("receiveOriginalTestResults - End\n");
}
 T_stTestList* receiveOriginalTestResults_r()
{
    int nRet, i, nTestItems;
    T_stTestList* pTestList;
    
    if(DEBUG_MPI_OPS) printf("receiveOriginalTestResults_r - Init\n");
    
    //Receive from master the number of tests to process
    MPI_Bcast(&nTestItems, 1, MPI_INT, 0, MPI_COMM_WORLD);

    if(DEBUG_MPI_OPS) printf("receiveOriginalTestResults_r - Received test suite: %d tests!\n",nTestItems);
    if(nTestItems>0)
    {
        //Send the specific tests
        MPI_Bcast(m_oTest, nTestItems, m_TestType, 0, MPI_COMM_WORLD);

        //transform the test list to a compatible structure
        pTestList = (T_stTestList*) redtestList2TestList_r((T_stTI*)&m_oTest, nTestItems);
    }
    else
        printf("receiveOriginalTestResults_r - None elements received!!\n");
    
    if(DEBUG_MPI_OPS) printf("receiveOriginalTestResults_r - End\n");
    return pTestList;
}
