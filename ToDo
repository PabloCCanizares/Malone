ICCS'17:
-----------
* Los test del programa original se ejecutan de forma distribuida.
* Ordenar los tests por tiempo de ejecucion para tratar de matar antes.
* Mientras sea posible, desplegar las ejecuciones de tal forma que no haya mas de un proceso 
worker ejecutando el mismo mutante (Por si muere, no desperdiciar capacidad de computo).
* Clusterizar los mutantes por medio de la técnica de compilación
* Los mutantes equivalentes no ejecutarlos.

- Utilizar las variables de log.
-----------
Anterior:
- Cada nodo únicamente debería compilar 1 vez. 
    -> Si tenemos varios hilos de ejecución y todos ellos compilan, se consideraría tiempo perdido y podría haber colisiones.

-------------------
Future:
Investigar como hace SQLITE el TH3 (https://sqlite.org/th3.html)
Se generan los mutantes on the fly. Estaría muy interesante poder realizar un enfoque a poder testear aplicaciones reales
de una forma asequible y en pararlelo. Hacer una modificacion del framework que permita, por ejemplo, para cada worker
dedicarse a un mutante completo, y hacer la mutación on the fly. Cuando termine borra el binario y asi ahorra espacio.

* Segun lo que pone en esta pagina: https://tool.oschina.net/uploads/apidocs/sqlite/testing.html
  Con TCL scripting son capaces de testear 90k lineas de codigo, que estan distribuidas en distintos objetos
  AKA, nuestro metodo vale poco. Hay que ver la forma de poder ejecutar en paralelo
  esta forma de generar test y revolucionar un pelin esta linea.
-------------------
Manual:

- Hay que meter la variable de entorno MALONE_HOME
- Al iniciar MALONE, pone invalid arguments, la cosa es mostrar por pantalla como saldria
- Meter un archivo .sh donde haya algun test, algo para iniciar. (un .sh que tenga el modo test por ejemplo)
- En general da la sensacion de que se hace dificil arrancar.
- Añadir un modo autotest, que se pruebe el solo


------------------
Tools:
 - Debugear: http://www.paradyn.org/STAT/STAT.html
 - Usar gdb xterm para encontrar problemas debug de forma rapida es bastante util

------------------
Fallos integracion:
 - Lectura de monitor da excepcion. Fixed [28/04/2020]
 - Cuando no se tienen permisos para ejecutar los comandos, excepcion!
 - Crash en el parallel equivalence. Fixed [28/04/2020]

------------------------
TODO cercano:
- Eliminar warnings
- Creacion de modo autotest
- Inclusion de un mini proyecto de mutation con la suma por ejemplo
    + Utilizar este proyecto para el auto test
    + Con este proyecto podemos dejar .sh que permitan ver como se utiliza el programa
- Organizar las carpetas (Importante, porque vaya desorden comp.)
- Comentar algo el codigo
- Quitar todo lo estatico posible, m_oTest[0] -> no hay necesidad
- Comentar los tipos de Options.h
- Tratar de eliminar los tipos que no aplican.
- Convertir oMap de estatico a dinamico (Pruebas empezadas en malone lab)
- Probar si los datatypes se pueden adaptar al maximo de test/mutantes para ahorrar envio por red.
- Con un autotest_add y markertoken '-' Excepcion no controlada (Creo que está bien, pero la salida por abort es abrupta)
- Algorithm 1 no va

------------------------
TODO futuro:
* Incluir un nuevo macro, [[MALONE_HOME]] y [[MALONE_PROJECTS]] para permitir compatibilidad de posibles proyectos
* Eliminar las estructuras estaticas y tener un malone totalmente dinamico
* Multiples coordinadores
* Dinamico y adaptable por tramo con granos mas grandes aun. (50% - 20% - 10%, algo asi.)
* Nueva version más sencilla y directa de equivalentes.
* Incluir en configuracion la forma de ejecutar en command line.
* Incluir un nuevo modo que automaticamente detecte pipes y permita partir el comando en varios y ejecutarlo tal cual lo hace pipe.
    - Mirar el malone_lab y el ejemplo 'popen_noshell_bidirectional_example', para hacernos una idea de como hilar varios | seguidos
    - https://github.com/mirnawahab/Interprocess-Communication-with-Pipes            

                                                                                                                                                                                                                                                                                                                                                                                                                                                